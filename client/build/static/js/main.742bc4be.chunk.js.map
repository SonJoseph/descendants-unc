{"version":3,"sources":["components/Document.js","components/CreateRelationship.js","components/CreateNode.js","components/CreatePopup.js","screens/SelectTree.js","components/ViewDocument.js","components/Property.js","components/ViewNode.js","components/Alert.js","components/UpdateNode.js","components/Message.js","components/ScreenRegistry.js","screens/UpdateTree.js","App.js","serviceWorker.js","index.js"],"names":["Document","props","update","e","updateDocument","idx","target","name","value","delete","deleteDocument","TextField","label","onChange","this","defaultValue","initName","initLink","React","Component","CreateRelationship","setState","reln","updateRelnForm","console","log","selectedIsRoot","state","selectedName","Select","MenuItem","CreateNode","updateRootInfo","event","addDocument","documents","push","link","deleteLastDocument","splice","length","key","val","relnType","create","a","person","gender","birth","death","moreinfo","isUpdate","newRootWithReln","isRoot","url","JSON","stringify","fetch","response","json","myJson","spouse_id","selectedID","response_spouse","json_spouse","back","changeRoot","history","pathname","family","selectedJson","updateNode","Documents","i","Grid","container","spacing","direction","justify","alignItems","style","maxHeight","overflow","item","xs","error","helperText","FormControl","className","InputLabel","id","type","InputLabelProps","shrink","multiline","rows","variant","margin","fullWidth","ButtonGroup","size","aria-label","color","Button","onClick","hasOwnProperty","close","withRouter","CreatePopup","trigger","position","modal","bind","SelectTree","getTreeRoots","tree_roots","updateTree","tree","Container","maxWidth","Typography","align","height","map","ViewDocument","ListItem","ListItemText","k","href","Property","isDocument","Display","ViewNode","selectedArr","List","edit","add","Alert","UpdateNode","updateSelectedNode","submitUpdates","deleteNode","Message","message","ScreenRegistry","window","d3","UpdateTree","getTree","socket","emit","session","root_id","root_name","drawTree","svg","document","getElementById","lastChild","removeChild","treeData","dTree","init","refs","debug","width","callbacks","nodeClick","chooseNode","nodeHeightSeperation","nodeWidth","nodeMaxHeight","top","right","bottom","left","styles","node","linage","marriage","text","extra","getNode","display","arr","parse","replace","Object","entries","forEach","del","cookies","Cookies","location","protocol","ws_scheme","hostname","get","openSocket","on","data","Form","split","defaultSize","class","ref","App","uuidv1","require","set","path","exact","component","Boolean","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ibAiCeA,E,YA3BX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAKVC,OAAS,SAACC,GACN,EAAKF,MAAMG,eAAe,EAAKC,IAAKF,EAAEG,OAAOC,KAAMJ,EAAEG,OAAOE,QAP9C,EAUlBC,OAAS,WACL,EAAKR,MAAMS,eAAe,EAAKL,MAR/B,EAAKA,IAAM,EAAKJ,MAAMI,IAHR,E,sEAgBd,OACI,6BACI,kBAACM,EAAA,EAAD,CAAWC,MAAM,gBAAgBL,KAAK,OAAOM,SAAUC,KAAKZ,OAAQa,aAAcD,KAAKb,MAAMe,WAC7F,kBAACL,EAAA,EAAD,CAAWC,MAAM,gBAAgBL,KAAK,OAAOM,SAAUC,KAAKZ,OAAQa,aAAcD,KAAKb,MAAMgB,gB,GArBtFC,IAAMC,WC6CdC,E,YAtCX,WAAYnB,GAAO,IAAD,8BACd,4CAAMA,KASVC,OAAS,SAACC,GACN,EAAKkB,SAAS,CACVC,KAAOnB,EAAEG,OAAOE,QAEpB,EAAKP,MAAMsB,eAAepB,EAAEG,OAAOE,QAXnCgB,QAAQC,IAAI,+CAAiD,EAAKxB,MAAMyB,gBAExE,EAAKC,MAAQ,CACTL,KAAO,IANG,E,sEAmBd,OACI,6BACQ,uCAAcR,KAAKb,MAAMM,KAAzB,sBAAkDO,KAAKb,MAAM2B,aAA7D,MACA,kBAACC,EAAA,EAAD,CACItB,KAAK,WACLM,SAAUC,KAAKZ,OACfM,MAAOM,KAAKa,MAAML,MAElB,kBAACQ,EAAA,EAAD,CAAUtB,MAAO,UAAjB,UACA,kBAACsB,EAAA,EAAD,CAAUtB,MAAO,UAAjB,SACEM,KAAKb,MAAMyB,gBAAkB,kBAACI,EAAA,EAAD,CAAUtB,MAAO,SAAjB,gB,GA/BtBU,IAAMC,WCOjCY,G,mBAEF,WAAY9B,GAAO,IAAD,8BACd,4CAAMA,KAoBV+B,eAAiB,SAACC,GACd,EAAKZ,SAAL,eACOY,EAAM3B,OAAOC,KAAO0B,EAAM3B,OAAOE,SAvB1B,EA2BjB0B,YAAc,WACZ,EAAKP,MAAMQ,UAAUC,KAAK,CACtB7B,KAAO,GACP8B,KAAM,KAEV,EAAKhB,SAAS,CACVc,UAAY,EAAKR,MAAMQ,aAjCZ,EAqCjBG,mBAAqB,WAClB,EAAKX,MAAMQ,UAAUI,OAAO,EAAKZ,MAAMQ,UAAUK,OAAO,EAAG,GAC3D,EAAKnB,SAAS,CACVc,UAAY,EAAKR,MAAMQ,aAxCb,EA4CjB/B,eAAiB,SAACC,EAAKoC,EAAKC,GACzB,EAAKf,MAAMQ,UAAU9B,GAAKoC,GAAOC,GA7CnB,EAgDjBnB,eAAiB,SAACmB,GACf,EAAKf,MAAMgB,SAAWD,GAjDR,EAoDlBE,OApDkB,sBAoDT,8CAAAC,EAAA,yDACD,EAAKlB,MAAMpB,KADV,oDAIDuC,EAAS,CACTvC,KAAM,EAAKoB,MAAMpB,KACjBwC,OAAQ,EAAKpB,MAAMoB,OACnBC,MAAO,EAAKrB,MAAMqB,MAClBC,MAAO,EAAKtB,MAAMsB,MAClBd,UAAW,EAAKR,MAAMQ,UACtBe,SAAU,EAAKvB,MAAMuB,UAErB,EAAKjD,MAAMkD,SAZV,wBAaCC,EAA0C,UAAxB,EAAKzB,MAAMgB,UAC5B,EAAKhB,MAAM0B,QAAUD,KAMpBN,EAAM,KAAW,GAEjBQ,EAAM,0BAA0BC,KAAKC,UAAUV,GAtBlD,SAuBoBW,MAAMH,GAvB1B,cAuBGI,EAvBH,iBAwBkBA,EAASC,OAxB3B,WAwBGC,EAxBH,OA0BG,EAAKjC,MAAM0B,OA1Bd,oBA8BOQ,EAAY,YACZT,EA/BP,kCAgCmCK,MAAM,2BAA6B,EAAKxD,MAAM6D,YAhCjF,eAgCWC,EAhCX,iBAiC+BA,EAAgBJ,OAjC/C,eAiCWK,EAjCX,OAkCKH,EAAYG,EAAW,SAEvBV,EAAM,iCAAiCM,EAAM,GAAO,WAAW,EAAK3D,MAAM6D,WAAW,aAAa,EAAKnC,MAAMgB,SAAS,aAAakB,EApCxI,UAqC4BJ,MAAMH,GArClC,eAqCWI,EArCX,iBAsCgCA,EAASC,OAtCzC,sBAwCK,EAAK1D,MAAMgE,MAAK,EAAOL,EAAM,IAxClC,kCA6CKN,EAAM,iCAAiC,EAAKrD,MAAM6D,WAAW,WAAWF,EAAM,GAAO,6BAA6BC,EA7CvH,UA8C4BJ,MAAMH,GA9ClC,eA8CWI,EA9CX,iBA+CgCA,EAASC,OA/CzC,eAgDK,EAAK1D,MAAMiE,WAAWN,EAAM,IAhDjC,gCAmDC,EAAK3D,MAAMkE,QAAQ/B,KAAK,CACtBgC,SAAU,UACVzC,MAAO,CAAE0C,OAAQT,KArDpB,gCAyDDd,EAAM,GAAS,EAAK7C,MAAMqE,aAAX,GACf,EAAKrE,MAAMsE,WAAWzB,GA1DrB,4CAlDL,EAAKnB,MAAQ,CACTpB,KAAM,EAAKN,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,KAAkC,GAC9DvB,OAAQ,EAAK9C,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,OAAoC,GAClEtB,MAAO,EAAK/C,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,MAAmC,GAChErB,MAAO,EAAKhD,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,MAAmC,GAChEpB,SAAU,EAAKjD,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,SAAsC,GACtEjB,OAAQ,EAAKpD,MAAMoD,OAEnBlB,UAAW,EAAKlC,MAAMkD,SAAW,EAAKlD,MAAMqE,aAAX,UAAuC,CACpE,CACI/D,KAAO,GACP8B,KAAO,KAIfM,SAAS,IAjBC,E,sEAoHd,IAFA,IAAM6B,EAAY,GAEVC,EAAE,EAAGA,EAAE3D,KAAKa,MAAMQ,UAAUK,OAAQiC,IACxCjD,QAAQC,IAAIX,KAAKa,MAAMQ,UAAUsC,GAAGlE,KAAO,MAAQO,KAAKa,MAAMQ,UAAUsC,GAAGpC,MAC3EmC,EAAUpC,KAAK,kBAAC,EAAD,CACX/B,IAAOoE,EACPzD,SAAYF,KAAKa,MAAMQ,UAAUsC,GAAGlE,KACpCU,SAAYH,KAAKa,MAAMQ,UAAUsC,GAAGpC,KACpCjC,eAAkBU,KAAKV,kBAK/B,OACI,6BAEI,kBAACsE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAASC,MAAO,CAACC,UAAW,OAAQC,SAAU,SACtHpE,KAAKb,MAAMkD,UAAY,uCAAarC,KAAKa,MAAMpB,OAC9CO,KAAKb,MAAMkD,WAAarC,KAAKb,MAAMoD,QAAU,kDAAwBvC,KAAKb,MAAMqE,aAAX,MACvE,kBAACI,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,OAEtC,kBAACH,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACxE,EAAA,EAAD,CAAWC,MAAM,OAAOL,KAAK,OAAOM,SAAUC,KAAKkB,eAAiBjB,aAAcD,KAAKa,MAAMpB,KAAM8E,MAA2B,KAApBvE,KAAKa,MAAMpB,KACrH+E,WAAgC,KAApBxE,KAAKa,MAAMpB,KAAc,sBAAwB,OAG/D,kBAACmE,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACI,EAAA,EAAD,CAAaC,UAAU,eACrB,kBAACC,EAAA,EAAD,CAAYC,GAAG,2BAAf,UACE,kBAAC7D,EAAA,EAAD,CACItB,KAAK,SACLM,SAAUC,KAAKkB,eAEfjB,aAAcD,KAAKa,MAAMoB,QAE7B,kBAACjB,EAAA,EAAD,CAAUtB,MAAM,IAAhB,KAAqB,oCAArB,KACI,kBAACsB,EAAA,EAAD,CAAUtB,MAAO,UAAjB,UACA,kBAACsB,EAAA,EAAD,CAAUtB,MAAO,QAAjB,QACA,kBAACsB,EAAA,EAAD,CAAUtB,MAAO,cAAjB,aACA,kBAACsB,EAAA,EAAD,CAAUtB,MAAO,WAAjB,gBAOZ,kBAACkE,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,OACpC,kBAACH,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACxE,EAAA,EAAD,CAAWC,MAAM,aAAaL,KAAK,QAAQoF,KAAK,OAAOC,gBAAiB,CAACC,QAAQ,GAAQhF,SAAUC,KAAKkB,eAAgBjB,aAAcD,KAAKa,MAAMqB,SAEnJ,kBAAC0B,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACxE,EAAA,EAAD,CAAWC,MAAM,aAAaL,KAAK,QAAQoF,KAAK,OAAOC,gBAAiB,CAACC,QAAQ,GAAQhF,SAAUC,KAAKkB,eAAgBjB,aAAcD,KAAKa,MAAMsB,WAKvJ,kBAACyB,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,kBAACzE,EAAA,EAAD,aAAW+E,GAAG,4BAA4BnF,KAAK,WAAWK,MAAM,mBAAmBkF,WAAS,EAACC,KAAK,IAClGhF,aAAa,cAAciF,QAAQ,WAAWhB,MAAO,CAAEiB,OAAQ,GAAKC,WAAS,EAACrF,SAAUC,KAAKkB,gBAD7F,eAC2HlB,KAAKa,MAAMuB,YAGxI,kBAACwB,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,SAASE,WAAW,UAC5C,kBAACL,EAAA,EAAD,CAAMS,MAAI,GACR,kEAGF,kBAACT,EAAA,EAAD,CAAMS,MAAI,GACPX,GAGH,kBAACE,EAAA,EAAD,CAAMS,MAAI,EAACH,MAAO,CAAEiB,OAAQ,IAC1B,kBAACE,EAAA,EAAD,CAAaC,KAAK,QAAQC,aAAW,8BAA8BC,MAAM,WACvE,kBAACC,EAAA,EAAD,CAAQC,QAAS1F,KAAKoB,YAAa8D,QAAQ,aAA3C,eACA,kBAACO,EAAA,EAAD,CAAQC,QAAS1F,KAAKwB,oBAAtB,uBAIJ,kBAACoC,EAAA,EAAD,CAAMS,MAAI,EAACH,MAAS,CAACiB,OAAQ,KAElBnF,KAAKa,MAAM0B,SAAWvC,KAAKb,MAAMkD,UAAY,kBAAC,EAAD,CAC9C5B,eAAkBT,KAAKS,eACvBK,aAAgBd,KAAKb,MAAMqE,aAAX,KAChB5C,iBACEZ,KAAKb,MAAMqE,aAAamC,eAAe,QAEzClG,KAAQO,KAAKa,MAAMpB,UASnC,kBAACmE,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACoB,EAAA,EAAD,CAAQC,QAAS1F,KAAK8B,OAAQoD,QAAQ,YAAYM,MAAM,YAAYF,KAAK,QAAQxF,MAAM,SAAUoE,MAAO,CAAEiB,OAAQ,IAC7GnF,KAAKb,MAAMkD,SAAW,SAAW,WAGjCrC,KAAKa,MAAM0B,QACZ,kBAACkD,EAAA,EAAD,CAAQC,QAAS1F,KAAKb,MAAMgE,KAAM+B,QAAQ,WAAWM,MAAM,YAAYF,KAAK,QAAQxF,MAAM,SAAUoE,MAAO,CAAEiB,OAAQ,IAArH,YAGAnF,KAAKa,MAAM0B,QACX,kBAACkD,EAAA,EAAD,CAAQC,QAAS1F,KAAKb,MAAMyG,MAAOV,QAAQ,WAAWM,MAAM,YAAYF,KAAK,QAAQxF,MAAM,SAAUoE,MAAO,CAAEiB,OAAQ,IAAtH,mB,GA/NG/E,IAAMC,YA0OhBwF,cAAW5E,G,QC3NX6E,E,YAxBX,WAAY3G,GAAQ,IAAD,8BACf,4CAAMA,KACD0B,MAAQ,CACX0B,QAAS,GAHI,E,sEAOV,IAAD,OACN,OACE,kBAAC,IAAD,CAAOwD,QAAS,kBAACN,EAAA,EAAD,CAAQD,MAAM,YAAYN,QAAQ,aAAlC,kBAAuEc,SAAS,eAAeC,OAAK,IACjH,SAAAL,GAAK,OACF,6BACE,2EACA,+GACA,kBAAC,EAAD,iBAAgB,EAAK/E,MAArB,CACE+E,MAAOA,EAAMM,KAAK,c,GAjBV9F,IAAMC,W,iBC4EjB8F,E,YAjEX,WAAYhH,GAAO,IAAD,8BACd,4CAAMA,KAOViH,aARkB,sBAQH,8BAAArE,EAAA,sEACYY,MAAM,iBADlB,cACLC,EADK,gBAEUA,EAASC,OAFnB,OAELC,EAFK,OAGX,EAAKvC,SAAS,CAAC8F,WAAavD,EAAOuD,aACnC3F,QAAQC,IAAI,EAAK0F,YAJN,2CARG,EAelBC,WAAa,SAACC,GACV7F,QAAQC,IAAI4F,GACZ,EAAKpH,MAAMkE,QAAQ/B,KAAK,CACpBgC,SAAU,UACVzC,MAAO,CAAE0C,OAAQgD,MAjBrB,EAAK1F,MAAQ,CACTwF,WAAa,IAEjB,EAAK5G,KAAO,EAAKN,MAAMqE,aALT,E,iFAwBdxD,KAAKoG,iB,+BAIC,IAAD,OACL,OACE,6BACE,kBAACxC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGE,QAAS,SAASD,UAAU,SAASG,MAAO,CAACiB,OAAO,IAC9E,kBAACvB,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACmC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAYxB,QAAQ,KAAKyB,MAAM,UAA/B,+BAGJ,kBAAC/C,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACmC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC7C,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGE,QAAS,UACnC,kBAACJ,EAAA,EAAD,CAAMS,MAAI,GACR,kBAACqC,EAAA,EAAD,CAAYxB,QAAQ,MAApB,2BAEF,kBAACtB,EAAA,EAAD,CAAMS,MAAI,EAACR,WAAS,EAACC,QAAS,EAAGE,QAAQ,SAASC,WAAW,SAASC,MAAO,CAAC0C,OAAO,IAAKxC,SAAU,SAE5FpE,KAAKa,MAAMwF,WAAWQ,KAClB,SAACxC,GAAD,OAAU,kBAACT,EAAA,EAAD,CAAMS,MAAI,GAAV,IAAY,kBAACoB,EAAA,EAAD,aAAQD,MAAM,YAAYE,QAAS,kBAAM,EAAKY,WAAWjC,IAAQa,QAAQ,YAAzE,QAA0F,WAA1F,IAAuGb,EAAK5E,KAA5G,KAAZ,SAKtB,kBAACmE,EAAA,EAAD,CAAMS,MAAI,GACR,kBAAC,EAAD,gB,GAzDGjE,IAAMC,W,mCCYhByG,E,YAfX,WAAY3H,GAAO,qEACTA,I,sEAIN,OACI,kBAAC4H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKhH,KAAKb,MAAM8H,EAAI,MADpB,IAC2B,uBAAGC,KAAMlH,KAAKb,MAAMyC,KAApB,IAA2B5B,KAAKb,MAAMyC,IAAtC,W,GAThBxB,IAAMC,WCyClB8G,E,YAvCX,WAAYhI,GAAO,IAAD,8BACd,4CAAMA,KACD0B,MAAQ,CACTuG,WAA8B,cAAjB,EAAKjI,MAAM8H,GAHd,E,sEAQd,IAAII,EAAUrH,KAAKb,MAAM8H,EAAI,MAAQjH,KAAKb,MAAMyC,IAChD,GAAoB,cAAjB5B,KAAKb,MAAM8H,EAAkB,CAE5BI,EAAU,GACV,IAAI,IAAI1D,EAAE,EAAGA,EAAE3D,KAAKb,MAAMyC,IAAIF,OAAQiC,IAAI,CACtC,IAAIhC,EAAM3B,KAAKb,MAAMyC,IAAI+B,GAAf,KACN/B,EAAM5B,KAAKb,MAAMyC,IAAI+B,GAAf,KAEV0D,EAAQ/F,KACJ,kBAAC,EAAD,CACI2F,EAAKtF,EACLC,IAAOA,MAKvB,OACI,kBAACmF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEQhH,KAAKa,MAAMuG,YAAc,4CAGzBC,Q,GAhCDjH,IAAMC,WCqCdiH,E,YAtCX,WAAYnI,GAAQ,qEACVA,I,sEAMN,IAFA,IAAMkI,EAAU,GAER1D,EAAE,EAAGA,EAAE3D,KAAKb,MAAMoI,YAAY7F,OAAQiC,IAAI,CAChD,IAAIhC,EAAM3B,KAAKb,MAAMoI,YAAY5D,GAAG,GAClC,GAAW,QAAPhC,EAAc,CAEhB,IAAIC,EAAM5B,KAAKb,MAAMoI,YAAY5D,GAAG,GAEpC0D,EAAQ/F,KACJ,kBAAC,EAAD,CACI2F,EAAKtF,EACLC,IAAOA,MAOrB,OACI,6BACI,uCAAa5B,KAAKb,MAAMqE,aAAX,MACb,kBAACgE,EAAA,EAAD,CAAM5C,GAAG,gBAEDyC,GAGR,kBAAC5B,EAAA,EAAD,CAAQC,QAAS1F,KAAKb,MAAMsI,MAA5B,UACA,kBAAChC,EAAA,EAAD,CAAQC,QAAS1F,KAAKb,MAAMuI,KAA5B,uB,GAlCOtH,IAAMC,WC0BdsH,E,YAvBX,WAAYxI,GAAQ,qEACVA,I,sEAGD,IAAD,OACN,OACE,kBAAC,IAAD,CAAO4G,QAAS,kBAACnC,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAQ,SAASC,WAAW,UAAS,kBAACL,EAAA,EAAD,CAAMS,MAAI,GAAC,kBAACoB,EAAA,EAAD,CAAQP,QAAQ,YAAYI,KAAK,QAAQpB,MAAO,CAACiB,OAAQ,IAAzD,cAA8Fa,SAAS,eAAeC,OAAK,IACxM,SAAAL,GAAK,OACF,6BACE,kBAACc,EAAA,EAAD,CAAYxB,QAAQ,MAApB,gEACA,kBAACwB,EAAA,EAAD,CAAYxB,QAAQ,SAApB,4HAEA,yBAAKR,UAAU,WACb,kBAACe,EAAA,EAAD,CAAQf,UAAU,SAASgB,QAAS,WAAQE,MAA5C,YACA,kBAACH,EAAA,EAAD,CAAQf,UAAU,SAASQ,QAAQ,WAAWM,MAAM,UAAUE,QAAS,WAAQ,EAAKvG,MAAMQ,WAA1F,sB,GAhBES,IAAMC,WCCpBuH,E,YAEF,WAAYzI,GAAQ,IAAD,8BACf,4CAAMA,KAGV0I,mBAAqB,SAAC1G,GAClB,EAAK0B,KAAK1B,EAAM3B,OAAOC,MAAQ0B,EAAM3B,OAAOE,OAL7B,EAQnBoI,cARmB,uCAQH,WAAMjF,GAAN,iBAAAd,EAAA,6DACRS,EAAM,0BAA0BC,KAAKC,UAAUG,GADvC,SAEWF,MAAMH,GAFjB,cAENI,EAFM,gBAGSA,EAASC,OAHlB,cAIZ,EAAK1D,MAAMgE,OAJC,2CARG,wDAenB4E,WAfmB,sBAeN,8BAAAhG,EAAA,6DACXrB,QAAQC,IAAI,EAAKxB,MAAMqE,aAAX,MACRhB,EAAM,sBAAsB,EAAKrD,MAAM6D,WAFhC,SAGYL,MAAMH,GAHlB,cAGLI,EAHK,gBAIUA,EAASC,OAJnB,cAK4B,IAApC,EAAK1D,MAAMqE,aAAX,KACD,EAAKrE,MAAMkE,QAAQ/B,KAAK,CACpBgC,SAAU,MAGd,EAAKnE,MAAMgE,MAAK,GAVP,2CAfM,E,sEA8Bf,OACI,6BACI,uCACA,kBAAC,EAAD,CACIK,aAAgBxD,KAAKb,MAAMqE,aAC3BjB,QAAU,EACVF,UAAY,EACZoB,WAAczD,KAAK8H,cACnB3E,KAAQnD,KAAKb,MAAMgE,OAEvB,kBAAC,EAAD,iBAAWnD,KAAKa,MAAhB,CACElB,OAAQK,KAAK+H,WAAW7B,KAAKlG,c,GA3CtBI,IAAMC,WAkDhBwF,cAAW+B,GCvDpBI,E,YACF,WAAY7I,GAAO,qEACTA,I,sEAIN,OAEQ,4BACKa,KAAKb,MAAM8I,a,GATV7H,IAAMC,WCUb6H,EAPQ,CACnB,KAASZ,EACT,OAAWM,EACX,IAAQ3G,EACR,KDSW+G,G,kEENfG,OAAOC,GAAKA,E,IAsMGC,E,YAjMX,WAAYlJ,GAAO,IAAD,uBACd,4CAAMA,KAmCVmJ,QApCkB,sBAoCR,8BAAAvG,EAAA,6DACN,EAAKlB,MAAM0H,OAAOC,KAAK,YAAa,CAChC,QAAY,EAAK3H,MAAM4H,QACvB,QAAY,EAAK5H,MAAM6H,UAHrB,SAKiB/F,MAAM,mBAAoB,EAAK9B,MAAM6H,SALtD,cAKA9F,EALA,gBAMeA,EAASC,OANxB,OAMAC,EANA,OAON,EAAKvC,SAAS,CACVoI,UAAY7F,EAAO,GAAP,KACZyD,KAAOzD,IAEX,EAAK8F,WAXC,2CApCQ,EAuDnBA,SAAW,WAGV,IADA,IAAIC,EAAMC,SAASC,eAAe,SAC3BF,EAAIG,WACTH,EAAII,YAAYJ,EAAIG,WAGrB,IAAIE,EAAW,EAAKrI,MAAM0F,KACrB4C,IAAMC,KAAKF,EACT,CACI1J,OAAQ,EAAK6J,KAAK9C,KAClB+C,OAAO,EACP1C,OAAQ,IACR2C,MAAO,KACPC,UAAW,CACPC,UAAW,EAAKC,WAEhBC,qBAAuB,SAASC,EAAWC,GACvC,OAAO,KAIf1E,OAAQ,CACJ2E,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAEVL,UAAW,IACXM,OAAQ,CACJC,KAAM,OACNC,OAAQ,SACRC,SAAU,WACVC,KAAM,eAxFJ,EA8FlBZ,WAAa,SAACjK,EAAM8K,EAAO3F,GACvB,EAAK4F,QAAQD,GACb,EAAKhK,SAAS,CACVkK,QAAU,UAjGA,EAqGnBD,QArGmB,uCAqGT,WAAO5F,GAAP,mBAAA7C,EAAA,sEACkBY,MAAM,mBAAqBiC,GAD7C,cACChC,EADD,gBAEcA,EAASC,OAFvB,OAECA,EAFD,OAID6H,EAAM,GAEV7H,EAAI,UAAgBJ,KAAKkI,MAAM9H,EAAI,UAAc+H,QAAQ,SAAS,IAAIA,QAAQ,KAAM,MAEpFC,OAAOC,QAAQjI,GAAMkI,SAAQ,YAAgB,IAAD,mBAAbpJ,EAAa,KAATjC,EAAS,KAC7B,OAARiC,GAAwB,SAARA,GAA0B,UAARA,GAEjC+I,EAAIpJ,KAAK,CAACK,EAAKjC,OAIvB,EAAKa,SAAS,CACVgH,YAAcmD,EACd1H,WAAa4B,EACbpB,aAAeX,IAlBd,4CArGS,wDA2HlBO,WAAa,SAACwB,GACV,EAAK/D,MAAM6H,QAAU9D,EACrB,EAAKzB,MAAK,EAAOyB,IA7HH,EAgInB6C,KAAO,WACH,EAAKlH,SAAS,CACVkK,QAAU,YAlIC,EAsInBtH,KAAO,WAA0C,IAAzC6H,EAAwC,wDAA7BpG,EAA6B,uDAA1B,EAAK/D,MAAMmC,WAC7BtC,QAAQC,IAAIqK,GACF,GAAPA,EACE,EAAKzK,SAAS,CACVgH,YAAc,GACdvE,WAAa,GACbQ,aAAe,GACfiH,QAAU,UAGd,EAAKD,QAAQ5F,GACb,EAAKrE,SAAS,CACVkK,QAAU,UAGlB,EAAKnC,WArJS,EAwJnBZ,IAAM,WACF,EAAKnH,SAAS,CACVkK,QAAU,SAxJb,IAAMQ,EAAU,IAAIC,IAEpB,GAAiC,WAA7B/C,OAAOgD,SAASC,SAChB,IAAIC,EAAY,cAEZA,EAAY,QAPN,OAUd3K,QAAQC,IAAI0K,EAAYlD,OAAOgD,SAASG,UAGxC,EAAKzK,MAAQ,CACT4H,QAAUwC,EAAQM,IAAI,cACtBhD,OAAQiD,IAAWH,EAAYlD,OAAOgD,SAASG,UAC/Cb,QAAU,OAEV9B,UAAYxJ,EAAMgM,SAAStK,MAAM0C,OAAO9D,KACxCiJ,QAAUvJ,EAAMgM,SAAStK,MAAM0C,OAAOqB,GAEtC2B,KAAO,GAEPvD,WAAa,GACbuE,YAAc,GACd/D,aAAe,IAGnB,EAAK3C,MAAM0H,OAAOkD,GAAG,eAAe,SAAAC,GAC7BA,EAAI,UAAgB,EAAK7K,MAAM6H,SAAW,EAAK7H,MAAM4H,SAAWiD,EAAI,UACnEhL,QAAQC,IAAI,0CACZ,EAAK2H,cA/BC,E,iFAmDdtI,KAAKsI,Y,+BA6GL,IAAMqD,EAAOzD,EAAelI,KAAKa,MAAM4J,SAGvC,OACI,kBAACjE,EAAA,EAAD,KAEI,kBAAC,IAAD,CAAWoF,MAAM,WAAWC,YAAa,KAE7B,yBAAK3H,MAAO,CAACC,UAAW,OAAQC,SAAU,SACrC,kBAACuH,EAAD,iBACO3L,KAAKa,MADZ,CAEG0B,QAAQ,EACRkF,KAAMzH,KAAKyH,KAAKvB,KAAKlG,MACrBmD,KAAMnD,KAAKmD,KAAK+C,KAAKlG,MACrB0H,IAAK1H,KAAK0H,IAAIxB,KAAKlG,MAEnBoD,WAAYpD,KAAKoD,WAAW8C,KAAKlG,MACjCiI,QAAS,gDAIjB,6BACI,uBAAG6D,MAAM,QAAT,IAAkB9L,KAAKa,MAAM8H,UAA7B,cACA,yBAAKoD,IAAI,OAAOnH,GAAK,QAAQ2E,MAAO,IAAM3C,OAAQ,a,GA1LzDxG,IAAMC,W,SCehB2L,OAhBf,WACI,IAAMf,EAAU,IAAIC,IACde,EAASC,EAAQ,KAGvB,OAFAjB,EAAQkB,IAAI,aAAcF,IAAU,CAAEG,KAAM,MAEpC,6BACN,kBAAC,KAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAIE,UAAWnG,IACjC,kBAAC,IAAD,CAAOiG,KAAK,UAAUE,UAAWjE,QCV3BkE,QACW,cAA7BpE,OAAOgD,SAASG,UAEe,UAA7BnD,OAAOgD,SAASG,UAEhBnD,OAAOgD,SAASG,SAASkB,MACvB,2DCLNC,IAASC,OAAO,kBAAC,GAAD,MAAS5D,SAASC,eAAe,SDoH3C,kBAAmB4D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.742bc4be.chunk.js","sourcesContent":["import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass Document extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.idx = this.props.idx\r\n    }\r\n\r\n    update = (e) => {\r\n        this.props.updateDocument(this.idx, e.target.name, e.target.value)\r\n    }\r\n\r\n    delete = () => {\r\n        this.props.deleteDocument(this.idx)\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <TextField label=\"Document Name\" name='name' onChange={this.update} defaultValue={this.props.initName}/>\r\n                <TextField label=\"Document Link\" name='link' onChange={this.update} defaultValue={this.props.initLink}/>\r\n                {/* <Button onClick={this.delete}> Delete </Button> */}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Document","import React from 'react'\r\n\r\nimport TextField from '@material-ui/core/TextField'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport Button from '@material-ui/core/Button'\r\nimport CreateNode from './CreateNode'\r\n\r\nclass CreateRelationship extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        console.log('Is the selected node the root of the tree?: ' + this.props.selectedIsRoot)\r\n\r\n        this.state = {\r\n            reln : ''\r\n        }\r\n    }\r\n\r\n    update = (e) => {\r\n        this.setState({ // Update the client\r\n            reln : e.target.value\r\n        })\r\n        this.props.updateRelnForm(e.target.value) // We have to send the updated state back to the parent\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div>\r\n                    <h2 >What is {this.props.name}'s relationship to {this.props.selectedName}? </h2>\r\n                    <Select\r\n                        name=\"relnType\"\r\n                        onChange={this.update}\r\n                        value={this.state.reln}\r\n                    >\r\n                        <MenuItem value={'spouse'}>Spouse</MenuItem>\r\n                        <MenuItem value={'parent'}>Child</MenuItem>\r\n                        { this.props.selectedIsRoot && <MenuItem value={'child'}>Parent</MenuItem>}\r\n                    </Select>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CreateRelationship\r\n","import React from 'react'\r\nimport { Route , withRouter} from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Document from './Document'\r\nimport CreateRelationship from './CreateRelationship'\r\nimport '../css/CreateNode.css';\r\n\r\nclass CreateNode extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { /* If we are updating a node, initialize the form to the existing fields */\r\n            name: this.props.isUpdate ? this.props.selectedJson['name'] : '',\r\n            gender: this.props.isUpdate ? this.props.selectedJson['gender'] : '',\r\n            birth: this.props.isUpdate ? this.props.selectedJson['birth'] : '',\r\n            death: this.props.isUpdate ? this.props.selectedJson['death'] : '',\r\n            moreinfo: this.props.isUpdate ? this.props.selectedJson['moreinfo'] : '',\r\n            isRoot: this.props.isRoot,\r\n\r\n            documents: this.props.isUpdate ? this.props.selectedJson['documents'] : [\r\n                {\r\n                    name : '',\r\n                    link : ''\r\n                }\r\n            ],\r\n\r\n            relnType:''\r\n        }\r\n    }\r\n\r\n    updateRootInfo = (event) => {\r\n        this.setState({\r\n              [event.target.name]: event.target.value\r\n        });\r\n     }\r\n\r\n     addDocument = () => {\r\n       this.state.documents.push({\r\n           name : '',\r\n           link :''\r\n       })\r\n       this.setState({\r\n           documents : this.state.documents\r\n       })\r\n     }\r\n\r\n     deleteLastDocument = () => {\r\n        this.state.documents.splice(this.state.documents.length-1, 1);\r\n        this.setState({\r\n            documents : this.state.documents\r\n        })\r\n     }\r\n\r\n     updateDocument = (idx, key, val) => {\r\n        this.state.documents[idx][key] = val\r\n     }\r\n\r\n     updateRelnForm = (val) =>{\r\n        this.state.relnType = val\r\n     }\r\n\r\n    create = async() => {\r\n        if(!this.state.name){\r\n          return\r\n        }\r\n        let person = {\r\n            name: this.state.name,\r\n            gender: this.state.gender,\r\n            birth: this.state.birth,\r\n            death: this.state.death,\r\n            documents: this.state.documents,\r\n            moreinfo: this.state.moreinfo\r\n        }\r\n        if(!this.props.isUpdate){\r\n          let newRootWithReln = this.state.relnType === 'child';\r\n            if(this.state.isRoot || newRootWithReln){\r\n              /*\r\n                We are creating a new tree from scratch\r\n                  OR\r\n                We are adding a new root whose child is the selectedID\r\n              */\r\n                person['root'] = 1\r\n            }\r\n            let url = '/api/createnode/person='+JSON.stringify(person)\r\n            let response = await fetch(url)\r\n            let myJson = await response.json()\r\n\r\n            if(!this.state.isRoot){\r\n                /*\r\n                    Create the specified relationship to the newly created node\r\n                */\r\n                let spouse_id = 'undefined'\r\n                if(!newRootWithReln){\r\n                  const response_spouse = await fetch('/api/getspouseid/nodeid=' + this.props.selectedID)\r\n                  const json_spouse = await response_spouse.json()\r\n                  spouse_id = json_spouse['spouseId']\r\n\r\n                  url = '/api/createrelationship/newId='+myJson['id']+'&relnId='+this.props.selectedID+'&relnType='+this.state.relnType+'&spouseId='+spouse_id\r\n                  const response = await fetch(url)\r\n                  let createRelnJson = await response.json()\r\n\r\n                  this.props.back(false, myJson['id'])\r\n\r\n                  return\r\n                }else{\r\n                  // Make the new node the parent of the selected (in this case, that is the old root node)\r\n                  url = '/api/createrelationship/newId='+this.props.selectedID+'&relnId='+myJson['id']+'&relnType=parent&spouseId='+spouse_id\r\n                  const response = await fetch(url)\r\n                  let createRelnJson = await response.json()\r\n                  this.props.changeRoot(myJson['id'])\r\n                }\r\n            }else{\r\n              this.props.history.push({\r\n                pathname: '/update',\r\n                state: { family: myJson }\r\n              })\r\n            }\r\n        }else{\r\n            person['id'] = this.props.selectedJson['id']\r\n            this.props.updateNode(person)\r\n        }\r\n    }\r\n    render(){\r\n        const Documents = []\r\n\r\n        for(let i=0; i<this.state.documents.length; i++){\r\n            console.log(this.state.documents[i].name + \" : \" + this.state.documents[i].link)\r\n            Documents.push(<Document\r\n                idx = {i}\r\n                initName = {this.state.documents[i].name}\r\n                initLink = {this.state.documents[i].link}\r\n                updateDocument = {this.updateDocument}\r\n                // deleteDocument = {this.deleteDocument}\r\n            />)\r\n        }\r\n\r\n        return(\r\n            <div>\r\n\r\n                <Grid container spacing={2} direction=\"column\" justify=\"center\" alignItems=\"center\" style={{maxHeight: '100%', overflow: 'auto'}}>\r\n                  {this.props.isUpdate && <h2>Editing {this.state.name}</h2>}\r\n                  {!this.props.isUpdate && !this.props.isRoot && <h2>Adding Relative to {this.props.selectedJson['name']}</h2>}\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2} direction=\"row\">\r\n\r\n                    <Grid item>\r\n                      <TextField label=\"Name\" name='name' onChange={this.updateRootInfo}  defaultValue={this.state.name} error={this.state.name === \"\"}\r\n                      helperText={this.state.name === \"\" ? 'Name Field Required' : ' '} />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <FormControl className=\"formControl\">\r\n                        <InputLabel id=\"demo-mutiple-name-label\">Gender</InputLabel>\r\n                          <Select\r\n                              name=\"gender\"\r\n                              onChange={this.updateRootInfo}\r\n                              // value={this.state.gender}\r\n                              defaultValue={this.state.gender}\r\n                          >\r\n                          <MenuItem value=\"\">  <em>None</em> </MenuItem>\r\n                              <MenuItem value={'female'}>Female</MenuItem>\r\n                              <MenuItem value={'male'}>Male</MenuItem>\r\n                              <MenuItem value={'non-binary'}>NonBinary</MenuItem>\r\n                              <MenuItem value={'unknown'}>Unknown</MenuItem>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2} direction=\"row\">\r\n                      <Grid item>\r\n                        <TextField label=\"Birth Date\" name='birth' type=\"date\" InputLabelProps={{shrink: true,}} onChange={this.updateRootInfo} defaultValue={this.state.birth}/>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <TextField label=\"Death Date\" name='death' type=\"date\" InputLabelProps={{shrink: true,}} onChange={this.updateRootInfo} defaultValue={this.state.death}/>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField id=\"outlined-multiline-static\" name='moreinfo' label=\"More Information\" multiline rows=\"6\"\r\n                    defaultValue=\"Add here...\" variant=\"outlined\" style={{ margin: 8 }} fullWidth onChange={this.updateRootInfo} defaultValue={this.state.moreinfo}/>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <Grid container direction=\"column\" alignItems=\"center\">\r\n                      <Grid item>\r\n                        <h3>Add your documents (if any) here:</h3>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        {Documents}\r\n                      </Grid>\r\n\r\n                      <Grid item style={{ margin: 8 }}>\r\n                        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\" color=\"primary\">\r\n                          <Button onClick={this.addDocument} variant=\"contained\">Add New Doc</Button>\r\n                          <Button onClick={this.deleteLastDocument}> Delete Last Doc </Button>\r\n                          </ButtonGroup>\r\n                      </Grid>\r\n\r\n                      <Grid item style = {{margin: 8}}>\r\n                            {\r\n                                !this.state.isRoot && !this.props.isUpdate && <CreateRelationship\r\n                                updateRelnForm = {this.updateRelnForm}\r\n                                selectedName = {this.props.selectedJson['name']}\r\n                                selectedIsRoot = {\r\n                                  this.props.selectedJson.hasOwnProperty('root') ? true : false\r\n                                } // For adding parent to root\r\n                                name = {this.state.name}\r\n                            />\r\n                            }\r\n                      </Grid>\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n\r\n                <Grid item>\r\n                  <Button onClick={this.create} variant=\"contained\" color=\"secondary\" size=\"large\" label=\"Finish\"  style={{ margin: 8 }}>\r\n                      {this.props.isUpdate ? 'Update' : 'Create'}\r\n                  </Button>\r\n                  {\r\n                      !this.state.isRoot &&\r\n                      <Button onClick={this.props.back} variant=\"outlined\" color=\"secondary\" size=\"large\" label=\"Finish\"  style={{ margin: 8 }}> Cancel </Button>\r\n                  }\r\n                  {\r\n                      this.state.isRoot &&\r\n                      <Button onClick={this.props.close} variant=\"outlined\" color=\"secondary\" size=\"large\" label=\"Finish\"  style={{ margin: 8 }}> Cancel </Button>\r\n                  }\r\n\r\n                </Grid>\r\n                </Grid>\r\n          </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(CreateNode);\r\n","import React from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport Button from '@material-ui/core/Button'\r\nimport CreateNode from '../components/CreateNode'\r\n\r\nclass CreatePopup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          isRoot : true\r\n        }\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <Popup trigger={<Button color=\"secondary\" variant=\"contained\"> Add New Tree </Button>} position=\"right center\" modal>\r\n          {close => (\r\n              <div>\r\n                <h1> Add your first person to the family tree! </h1>\r\n                <p> Your family tree will be idenitifed by this person. You can change this later. </p>\r\n                <CreateNode {...this.state}\r\n                  close={close.bind(this)}\r\n                  />\r\n              </div>\r\n          )}\r\n        </Popup>\r\n      )\r\n    }\r\n\r\n}\r\nexport default CreatePopup\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport SplitPane from 'react-split-pane'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport CreateNode from '../components/CreateNode'\r\nimport CreatePopup from '../components/CreatePopup'\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nclass SelectTree extends React.Component {\r\n    /*\r\n        Load the client with a list of the available family trees.\r\n    */\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            tree_roots : [],\r\n        }\r\n        this.name = this.props.selectedJson\r\n    }\r\n\r\n    getTreeRoots = async () => {\r\n        const response = await fetch('/api/gettrees')\r\n        const myJson = await response.json()\r\n        this.setState({tree_roots : myJson.tree_roots})\r\n        console.log(this.tree_roots)\r\n    }\r\n\r\n    updateTree = (tree) => {\r\n        console.log(tree)\r\n        this.props.history.push({\r\n            pathname: '/update',\r\n            state: { family: tree }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTreeRoots()\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Grid container spacing={3} justify= 'center' direction=\"column\" style={{margin:8}}>\r\n              <Grid item >\r\n                <Container maxWidth=\"md\">\r\n                  <Typography variant='h2' align='center'> The Descendants Project </Typography>\r\n                </Container>\r\n              </Grid>\r\n              <Grid item >\r\n                <Container maxWidth=\"sm\">\r\n                  <Grid container spacing={3} justify= 'center'>\r\n                    <Grid item>\r\n                      <Typography variant='h5'> Select Existing Tree </Typography>\r\n                    </Grid>\r\n                    <Grid item container spacing={1} justify=\"center\" alignItems=\"center\" style={{height:300, overflow: 'auto'}}>\r\n                        {\r\n                            this.state.tree_roots.map(\r\n                                (item) => <Grid item> <Button color=\"secondary\" onClick={() => this.updateTree(item)}  variant=\"outlined\" color=\"primary\" > {item.name} </Button> </Grid>\r\n                            )\r\n                        }\r\n                        {/* <ListItem style={{ width: '100%', marginTop: '30px' }}><Button style={{ width: '100%' }} variant=\"outlined\" color=\"primary\" onClick={() => this.props.history.push('/createClass')}> Add a new class </Button></ListItem> */}\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <CreatePopup  />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Container>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectTree\r\n","/*\r\n    Using this to display documents and make them clickable\r\n*/\r\nimport React from 'react'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\n\r\n\r\nclass ViewDocument extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <ListItem>\r\n                <ListItemText>\r\n                    {this.props.k + \" : \"} <a href={this.props.val}> {this.props.val} </a>\r\n                </ListItemText>\r\n            </ListItem>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default ViewDocument","/*\r\n    Using this to display a field of a node\r\n*/\r\nimport React from 'react'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport ViewDocument from '../components/ViewDocument'\r\n\r\n\r\nclass Property extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isDocument : this.props.k === 'documents'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let Display = this.props.k + ' : ' + this.props.val // this.props.val is an array\r\n        if(this.props.k === 'documents'){\r\n            \r\n            Display = []\r\n            for(let i=0; i<this.props.val.length; i++){\r\n                let key = this.props.val[i]['name']\r\n                let val = this.props.val[i]['link']\r\n\r\n                Display.push(\r\n                    <ViewDocument \r\n                        k = {key}\r\n                        val = {val}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        return(\r\n            <ListItem>\r\n                <ListItemText>\r\n                    {\r\n                        this.state.isDocument && <div> Documents </div>\r\n                    }\r\n                    {\r\n                        Display\r\n                    }\r\n                </ListItemText>\r\n            </ListItem>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Property","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport Property from '../components/Property'\r\n\r\nclass ViewNode extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        const Display = []\r\n\r\n        for(let i=0; i<this.props.selectedArr.length; i++){\r\n          let key = this.props.selectedArr[i][0]\r\n            if (key != 'name'){\r\n\r\n              let val = this.props.selectedArr[i][1]\r\n\r\n              Display.push(\r\n                  <Property\r\n                      k = {key}\r\n                      val = {val}\r\n                  />\r\n                )\r\n            }\r\n\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <h1>Viewing {this.props.selectedJson['name']}</h1>\r\n                <List id=\"viewNodeInfo\">\r\n                    {\r\n                        Display\r\n                    }\r\n                </List>\r\n                <Button onClick={this.props.edit}> Edit </Button>\r\n                <Button onClick={this.props.add}> Add Relative </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewNode\r\n","import React from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport Button from '@material-ui/core/Button'\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass Alert extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <Popup trigger={<Grid container justify=\"center\" alignItems=\"center\"><Grid item><Button variant=\"contained\" size=\"large\" style={{margin: 8}}> Delete </Button></Grid></Grid>} position=\"right center\" modal>\r\n          {close => (\r\n              <div>\r\n                <Typography variant=\"h6\"> Are you sure you want to delete this person from the tree? </Typography>\r\n                <Typography variant=\"body2\"> This will delete any people directly below this person in the tree, their spouse, and the data for all of those people.\r\n                  </Typography>\r\n                <div className=\"actions\">\r\n                  <Button className=\"button\" onClick={() => { close(); }}> Cancel </Button>\r\n                  <Button className=\"button\" variant=\"outlined\" color=\"primary\" onClick={() => { this.props.delete() }}> Confirm </Button>\r\n                </div>\r\n              </div>\r\n          )}\r\n        </Popup>\r\n      )\r\n    }\r\n\r\n}\r\nexport default Alert\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Alert from '../components/Alert.js'\r\nimport { Route , withRouter} from 'react-router-dom';\r\nimport CreateNode from '../components/CreateNode'\r\n\r\nclass UpdateNode extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    updateSelectedNode = (event) => {\r\n        this.json[event.target.name] = event.target.value\r\n     }\r\n\r\n    submitUpdates = async(json) => {\r\n        let url = '/api/updatenode/person='+JSON.stringify(json);\r\n        const response = await fetch(url)\r\n        const myJson = await response.json()\r\n        this.props.back()\r\n    }\r\n\r\n    deleteNode = async () => {\r\n      console.log(this.props.selectedJson['root'])\r\n      let url = '/api/deletenode/id='+this.props.selectedID;\r\n      const response = await fetch(url)\r\n      const myJson = await response.json()\r\n      if(this.props.selectedJson['root'] === 1){\r\n        this.props.history.push({\r\n            pathname: '/',\r\n        })\r\n      } else {\r\n        this.props.back(true)\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div> Edit </div>\r\n                <CreateNode\r\n                    selectedJson = {this.props.selectedJson}\r\n                    isRoot = {false}\r\n                    isUpdate = {true}\r\n                    updateNode = {this.submitUpdates}\r\n                    back = {this.props.back}\r\n                />\r\n                <Alert {...this.state}\r\n                  delete={this.deleteNode.bind(this)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(UpdateNode)\r\n","import React from 'react'\r\n\r\nclass Message extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            \r\n                <h1>\r\n                    {this.props.message}\r\n                </h1>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Message","import ViewNode from '../components/ViewNode.js'\r\nimport UpdateNode from '../components/UpdateNode.js'\r\nimport CreateNode from '../components/CreateNode.js'\r\nimport Message from '../components/Message.js'\r\n\r\nconst ScreenRegistry = {\r\n    'view' : ViewNode,\r\n    'update' : UpdateNode,\r\n    'add' : CreateNode,\r\n    'home' : Message\r\n}\r\n\r\nexport default ScreenRegistry","import React from 'react'\r\n\r\nimport ScreenRegistry from '../components/ScreenRegistry'\r\nimport Container from '@material-ui/core/Container'\r\nimport openSocket from 'socket.io-client'\r\nimport Cookies from 'universal-cookie'\r\n\r\nimport * as d3 from \"d3\"\r\nimport _ from 'lodash'\r\nimport dTree from 'd3-dtree'\r\nimport '../css/UpdateTree.css'\r\nimport SplitPane from 'react-split-pane'\r\nwindow.d3 = d3;\r\n\r\nclass UpdateTree extends React.Component {\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        const cookies = new Cookies()\r\n\r\n        if (window.location.protocol === \"https:\") {\r\n            var ws_scheme = \"wss://\";\r\n        } else {\r\n            var ws_scheme = \"ws://\"\r\n        };\r\n\r\n        console.log(ws_scheme + window.location.hostname)\r\n\r\n\r\n        this.state = {\r\n            session : cookies.get('SESSION_ID'),\r\n            socket: openSocket(ws_scheme + window.location.hostname),\r\n            display : 'home',\r\n\r\n            root_name : props.location.state.family.name,\r\n            root_id : props.location.state.family.id,\r\n\r\n            tree : [],\r\n\r\n            selectedID : \"\",\r\n            selectedArr : [],\r\n            selectedJson : {},\r\n        }\r\n\r\n        this.state.socket.on('RefreshTree', data =>{\r\n            if(data['tree_id'] === this.state.root_id && this.state.session != data['session']){\r\n                console.log('Another client is working on this tree')\r\n                this.getTree()\r\n            }\r\n        })\r\n    }\r\n\r\n    getTree = async () => { // We currently can't change the root of the tree\r\n        this.state.socket.emit('FetchTree', {\r\n            'session' : this.state.session,\r\n            'tree_id' : this.state.root_id\r\n        })\r\n        const response = await fetch('/api/gettree/id='+ this.state.root_id)\r\n        const myJson = await response.json()\r\n        this.setState({\r\n            root_name : myJson[0]['name'], // In case the name of the root changes\r\n            tree : myJson\r\n        })\r\n        this.drawTree()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTree()\r\n    }\r\n\r\n\r\n   drawTree = () => {\r\n     // clear the canvas\r\n    var svg = document.getElementById(\"graph\")\r\n    while (svg.lastChild) {\r\n      svg.removeChild(svg.lastChild);\r\n    }\r\n\r\n     var treeData = this.state.tree\r\n          dTree.init(treeData,\r\n            {\r\n                target: this.refs.tree,\r\n                debug: true,\r\n                height: 800,\r\n                width: 1200,\r\n                callbacks: {\r\n                    nodeClick: this.chooseNode,\r\n                    /* Set the vertical space between nodes */\r\n                    nodeHeightSeperation : function(nodeWidth, nodeMaxHeight){\r\n                        return 30;\r\n                    }\r\n\r\n                },\r\n                margin: {\r\n                    top: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    left: 0\r\n                },\r\n                nodeWidth: 100,\r\n                styles: {\r\n                    node: 'node',\r\n                    linage: 'linage',\r\n                    marriage: 'marriage',\r\n                    text: 'nodeText'\r\n                }\r\n            }\r\n        );\r\n   }\r\n\r\n    chooseNode = (name, extra, id) => {\r\n        this.getNode(extra)\r\n        this.setState({\r\n            display : 'view'\r\n        })\r\n   }\r\n\r\n   getNode = async (id) => {\r\n        const response = await fetch('/api/getnode/id=' + id)\r\n        const json = await response.json()\r\n\r\n        let arr = []\r\n\r\n        json['documents'] = JSON.parse(json['documents'].replace(/\\n|\\r/g,'').replace(/'/g, '\"'))\r\n\r\n        Object.entries(json).forEach(([key,value])=>{\r\n            if(key !== \"id\" && key !== \"root\" && key !== \"depth\"){\r\n                // Don't display these fields. If they're not displayed, then they also can't be edited\r\n                arr.push([key, value])\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            selectedArr : arr, // we display this\r\n            selectedID : id,\r\n            selectedJson : json, // we use this to update fields\r\n        })\r\n    }\r\n\r\n    changeRoot = (id) => {\r\n        this.state.root_id = id // set a new root id\r\n        this.back(false, id)\r\n    }\r\n\r\n   edit = () => {\r\n       this.setState({\r\n           display : 'update'\r\n       })\r\n   }\r\n\r\n   back = (del=false, id=this.state.selectedID) => {\r\n       console.log(del)\r\n       if(del == true){\r\n            this.setState({\r\n                selectedArr : [],\r\n                selectedID : '',\r\n                selectedJson : {},\r\n                display : 'home'\r\n            })\r\n        }else{\r\n            this.getNode(id) // view the specified node\r\n            this.setState({\r\n                display : 'view'\r\n            })\r\n        }\r\n        this.getTree() // refresh node\r\n   }\r\n\r\n   add = () => {\r\n       this.setState({\r\n           display : 'add'\r\n       })\r\n   }\r\n\r\n    render() {\r\n\r\n        const Form = ScreenRegistry[this.state.display]\r\n        const props = {}\r\n\r\n        return (\r\n            <Container>\r\n\r\n                <SplitPane split=\"vertical\" defaultSize={400}>\r\n\r\n                            <div style={{maxHeight: '100%', overflow: 'auto'}}>\r\n                                {<Form\r\n                                    {...this.state} // parent's state can be accesed in child via this.props...\r\n                                    isRoot={false}\r\n                                    edit={this.edit.bind(this)}\r\n                                    back={this.back.bind(this)}\r\n                                    add={this.add.bind(this)}\r\n\r\n                                    changeRoot={this.changeRoot.bind(this)}\r\n                                    message={'Click a person to view their information!'}\r\n                                />}\r\n                            </div>\r\n\r\n                            <div >\r\n                                <p class=\"text\"> {this.state.root_name}'s Family </p>\r\n                                <svg ref=\"tree\" id = \"graph\" width={1000} height={700}></svg>\r\n                            </div>\r\n                </SplitPane>\r\n\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpdateTree\r\n","import Button from '@material-ui/core/Button'\r\nimport React from 'react'\r\nimport { Typography } from '@material-ui/core';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n/* Screens */\r\nimport SelectTree from './screens/SelectTree'\r\nimport UpdateTree from './screens/UpdateTree'\r\n/* Routing */\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nimport Cookies from 'universal-cookie'\r\n\r\nfunction App() {\r\n    const cookies = new Cookies();\r\n    const uuidv1 = require('uuid/v1')\r\n    cookies.set('SESSION_ID', uuidv1(), { path: '/' });\r\n\r\n    return  <div>\r\n      <Router>\r\n          <div>\r\n              <Route exact path=\"/\" component={SelectTree} />\r\n              <Route path=\"/update\" component={UpdateTree} />\r\n          </div>\r\n      </Router>\r\n\r\n\t</div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/* Screens */\r\nimport App from './App'\r\nimport SelectTree from './screens/SelectTree'\r\nimport UpdateTree from './screens/UpdateTree'\r\n/* Routing */\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}