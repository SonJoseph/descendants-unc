{"version":3,"sources":["App.js","screens/SelectTree.js","screens/UpdateTree.js","serviceWorker.js","index.js"],"names":["App","to","Button","variant","color","SelectTree","props","getTreeRoots","a","fetch","response","json","myJson","setState","tree_roots","updateTree","tree","history","push","pathname","state","family","this","List","map","item","ListItem","onClick","React","Component","window","d3","UpdateTree","getTree","drawTree","treeData","dTree","init","target","refs","debug","height","width","callbacks","nodeClick","chooseNode","margin","top","right","bottom","left","nodeWidth","styles","node","linage","marriage","text","name","extra","id","newPerson","relnWith","relnType","typeName","e","value","console","log","selectRelationship","createNode","url","location","confirm_msg","Container","split","defaultSize","TextField","label","onChange","InputLabel","Select","MenuItem","ref","Boolean","hostname","match","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19bebbd0.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return  <div>\r\n\t  \t<h1> The Descendants Project </h1>\r\n\r\n        <Link to = \"/select\" >\r\n          <Button  variant=\"outlined\" color=\"primary\" > View A Tree  </Button>\r\n        </Link>\r\n      \r\n\t</div>\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass SelectTree extends React.Component {\r\n    /*\r\n        Load the client with a list of the available family trees.\r\n    */\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            tree_roots : []\r\n        }\r\n    }\r\n\r\n    getTreeRoots = async () => { \r\n        const response = await fetch('/api/gettrees') \r\n        const myJson = await response.json()\r\n        this.setState({tree_roots : myJson.tree_roots})\r\n    }\r\n\r\n    updateTree = (tree) => {\r\n        this.props.history.push({\r\n            pathname: '/update',\r\n            state: { family: tree }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTreeRoots()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Select tree</h1>\r\n                <List>\r\n                    {\r\n                        this.state.tree_roots.map(\r\n                            (item) => <ListItem> <Button onClick={() => this.updateTree(item)}  variant=\"outlined\" color=\"primary\" > {item} </Button> </ListItem>\r\n                        )\r\n                    }\r\n                    {/* <ListItem style={{ width: '100%', marginTop: '30px' }}><Button style={{ width: '100%' }} variant=\"outlined\" color=\"primary\" onClick={() => this.props.history.push('/createClass')}> Add a new class </Button></ListItem> */}\r\n                </List>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectTree","import React from 'react'\r\n\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from '@material-ui/core/Container'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport * as d3 from \"d3\"\r\nimport _ from 'lodash'\r\nimport dTree from 'd3-dtree'\r\nimport '../css/UpdateTree.css'\r\nimport SplitPane from 'react-split-pane'\r\nwindow.d3 = d3;\r\n\r\nclass UpdateTree extends React.Component {\r\n    /*\r\n        A form to update an existing tree\r\n    */\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            family : props.location.state.family,\r\n            tree : [],\r\n            newPerson : {\r\n                name : \"\",\r\n                relnType : \"\",\r\n                relnWith : \"\" // ex: relnWith is relnType of name\r\n            },\r\n            confirm_msg : \"\" // for node creation\r\n        }\r\n    }\r\n\r\n    getTree = async () => {\r\n        const response = await fetch('/api/gettree/' + this.state.family)\r\n        const myJson = await response.json()\r\n        this.setState({tree : myJson})\r\n        this.drawTree()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTree()\r\n    }\r\n\r\n\r\n   drawTree = () => {\r\n     var treeData = this.state.tree\r\n          dTree.init(treeData,\r\n            {\r\n                target: this.refs.tree,\r\n                debug: true,\r\n                height: 800,\r\n                width: 1200,\r\n                callbacks: {\r\n                    nodeClick: this.chooseNode\r\n                },\r\n                margin: {\r\n                    top: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    left: 0\r\n                },\r\n                nodeWidth: 100,\r\n                styles: {\r\n                    node: 'node',\r\n                    linage: 'linage',\r\n                    marriage: 'marriage',\r\n                    text: 'nodeText'\r\n                }\r\n            }\r\n        );\r\n   }\r\n\r\n    chooseNode = (name, extra, id) => {\r\n        // button event for selecting a node\r\n        this.setState({\r\n            newPerson : {\r\n                relnWith : name,\r\n                name : this.state.newPerson.name,\r\n                relnType : this.state.newPerson.relnType\r\n            }\r\n        })\r\n   }\r\n\r\n    typeName = (e) => {\r\n        // input handler for name of new person\r\n        this.setState({\r\n            newPerson : {\r\n                name : e.target.value,\r\n                relnType : this.state.newPerson.relnType,\r\n                relnWith : this.state.newPerson.relnWith \r\n            }\r\n        })\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    selectRelationship = (e) => {\r\n        // input handler for selecting relationship of new person to selected node\r\n        this.setState({\r\n            newPerson : {\r\n                name : this.state.newPerson.name,\r\n                relnType : e.target.value,\r\n                relnWith : this.state.newPerson.relnWith\r\n            }\r\n        })\r\n        console.log(this.state.newPerson.relnType);\r\n    }\r\n\r\n    createNode = async () => {\r\n        /* We should probably ask for validation before creating the node\r\n        this.setState({confirm_msg : 'Are you sure you want to add ' + this.state.newPerson.name + ' where ' + this.state.newPerson.relnWith\r\n        +  ' is the ' + this.state.newPerson.relnType});\r\n        */\r\n       //name=<name>&relnWith=<relOf>&relnType=<relnType>\r\n        let url = '/api/createnode/name='+this.state.newPerson.name+'&relnWith='+this.state.newPerson.relnWith+'&relnType='+this.state.newPerson.relnType\r\n        const response = await fetch(url)\r\n        const myJson = await response.json()\r\n        console.log(myJson) //this is going to return dummy. however, before we proceed, we should check this response\r\n        this.getTree() \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n\r\n            <SplitPane split=\"vertical\" defaultSize={350}>\r\n                        <div>\r\n                            Selected Person: {this.state.newPerson.relnWith}\r\n                            <TextField\r\n                                label=\"New Person\"\r\n                                value={this.state.newPerson.name}\r\n                                onChange={this.typeName}\r\n                            />\r\n                            <InputLabel >What is {this.state.newPerson.relnWith}'s relationship to {this.state.newPerson.name} </InputLabel>\r\n                            <Select\r\n                                value={this.state.newPerson.relnType}\r\n                                onChange={this.selectRelationship}\r\n                            >\r\n                                <MenuItem value={'spouse'}>Spouse</MenuItem>\r\n                                <MenuItem value={'parent'}>Parent</MenuItem>\r\n                            </Select>\r\n                            <Button onClick={this.createNode}>Create Node</Button>\r\n                            {this.state.confirm_msg}\r\n                        </div>\r\n                        <div>\r\n                            {this.state.family}'s Family\r\n                            <svg ref=\"tree\" id = \"graph\" width={800} height={500}></svg>\r\n                            {/* <Button onClick={this.getTree}>Get Tree data</Button>\r\n                            <Button onClick={this.drawTree}>Draw Node</Button> */}\r\n                        </div>\r\n            </SplitPane>\r\n\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpdateTree\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/* Screens */\r\nimport App from './App'\r\nimport SelectTree from './screens/SelectTree'\r\nimport UpdateTree from './screens/UpdateTree'\r\n/* Routing */\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst routing = (\r\n    <Router>\r\n        <div>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route path=\"/select\" component={SelectTree} />\r\n            <Route path=\"/update\" component={UpdateTree} />\r\n        </div>\r\n    </Router>\r\n)\r\n\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}